// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: protos/vote/public_vote.proto

package vote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PublicVoteService_Create_FullMethodName        = "/protos.PublicVoteService/Create"
	PublicVoteService_GetByIdPublic_FullMethodName = "/protos.PublicVoteService/GetByIdPublic"
	PublicVoteService_GetByIdVote_FullMethodName   = "/protos.PublicVoteService/GetByIdVote"
	PublicVoteService_GetAllPublic_FullMethodName  = "/protos.PublicVoteService/GetAllPublic"
	PublicVoteService_GetAllVote_FullMethodName    = "/protos.PublicVoteService/GetAllVote"
)

// PublicVoteServiceClient is the client API for PublicVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicVoteServiceClient interface {
	// Create a new public vote
	Create(ctx context.Context, in *PublicVoteCreate, opts ...grpc.CallOption) (*PublicVoteRes, error)
	// Get a public vote by its ID
	GetByIdPublic(ctx context.Context, in *PublicVoteById, opts ...grpc.CallOption) (*PublicVoteRes, error)
	// Get a vote by its ID
	GetByIdVote(ctx context.Context, in *VoteById, opts ...grpc.CallOption) (*VoteRes, error)
	// Get all public votes
	GetAllPublic(ctx context.Context, in *GetAllPublicVoteReq, opts ...grpc.CallOption) (*GetAllPublicVoteRes, error)
	// Get all public votes
	GetAllVote(ctx context.Context, in *GetAllVoteReq, opts ...grpc.CallOption) (*GetAllVoteRes, error)
}

type publicVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicVoteServiceClient(cc grpc.ClientConnInterface) PublicVoteServiceClient {
	return &publicVoteServiceClient{cc}
}

func (c *publicVoteServiceClient) Create(ctx context.Context, in *PublicVoteCreate, opts ...grpc.CallOption) (*PublicVoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicVoteRes)
	err := c.cc.Invoke(ctx, PublicVoteService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicVoteServiceClient) GetByIdPublic(ctx context.Context, in *PublicVoteById, opts ...grpc.CallOption) (*PublicVoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicVoteRes)
	err := c.cc.Invoke(ctx, PublicVoteService_GetByIdPublic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicVoteServiceClient) GetByIdVote(ctx context.Context, in *VoteById, opts ...grpc.CallOption) (*VoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoteRes)
	err := c.cc.Invoke(ctx, PublicVoteService_GetByIdVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicVoteServiceClient) GetAllPublic(ctx context.Context, in *GetAllPublicVoteReq, opts ...grpc.CallOption) (*GetAllPublicVoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPublicVoteRes)
	err := c.cc.Invoke(ctx, PublicVoteService_GetAllPublic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicVoteServiceClient) GetAllVote(ctx context.Context, in *GetAllVoteReq, opts ...grpc.CallOption) (*GetAllVoteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllVoteRes)
	err := c.cc.Invoke(ctx, PublicVoteService_GetAllVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicVoteServiceServer is the server API for PublicVoteService service.
// All implementations must embed UnimplementedPublicVoteServiceServer
// for forward compatibility
type PublicVoteServiceServer interface {
	// Create a new public vote
	Create(context.Context, *PublicVoteCreate) (*PublicVoteRes, error)
	// Get a public vote by its ID
	GetByIdPublic(context.Context, *PublicVoteById) (*PublicVoteRes, error)
	// Get a vote by its ID
	GetByIdVote(context.Context, *VoteById) (*VoteRes, error)
	// Get all public votes
	GetAllPublic(context.Context, *GetAllPublicVoteReq) (*GetAllPublicVoteRes, error)
	// Get all public votes
	GetAllVote(context.Context, *GetAllVoteReq) (*GetAllVoteRes, error)
	mustEmbedUnimplementedPublicVoteServiceServer()
}

// UnimplementedPublicVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicVoteServiceServer struct {
}

func (UnimplementedPublicVoteServiceServer) Create(context.Context, *PublicVoteCreate) (*PublicVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPublicVoteServiceServer) GetByIdPublic(context.Context, *PublicVoteById) (*PublicVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdPublic not implemented")
}
func (UnimplementedPublicVoteServiceServer) GetByIdVote(context.Context, *VoteById) (*VoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdVote not implemented")
}
func (UnimplementedPublicVoteServiceServer) GetAllPublic(context.Context, *GetAllPublicVoteReq) (*GetAllPublicVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPublic not implemented")
}
func (UnimplementedPublicVoteServiceServer) GetAllVote(context.Context, *GetAllVoteReq) (*GetAllVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVote not implemented")
}
func (UnimplementedPublicVoteServiceServer) mustEmbedUnimplementedPublicVoteServiceServer() {}

// UnsafePublicVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicVoteServiceServer will
// result in compilation errors.
type UnsafePublicVoteServiceServer interface {
	mustEmbedUnimplementedPublicVoteServiceServer()
}

func RegisterPublicVoteServiceServer(s grpc.ServiceRegistrar, srv PublicVoteServiceServer) {
	s.RegisterService(&PublicVoteService_ServiceDesc, srv)
}

func _PublicVoteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicVoteCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).Create(ctx, req.(*PublicVoteCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicVoteService_GetByIdPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicVoteById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).GetByIdPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_GetByIdPublic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).GetByIdPublic(ctx, req.(*PublicVoteById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicVoteService_GetByIdVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).GetByIdVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_GetByIdVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).GetByIdVote(ctx, req.(*VoteById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicVoteService_GetAllPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPublicVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).GetAllPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_GetAllPublic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).GetAllPublic(ctx, req.(*GetAllPublicVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicVoteService_GetAllVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicVoteServiceServer).GetAllVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicVoteService_GetAllVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicVoteServiceServer).GetAllVote(ctx, req.(*GetAllVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicVoteService_ServiceDesc is the grpc.ServiceDesc for PublicVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PublicVoteService",
	HandlerType: (*PublicVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PublicVoteService_Create_Handler,
		},
		{
			MethodName: "GetByIdPublic",
			Handler:    _PublicVoteService_GetByIdPublic_Handler,
		},
		{
			MethodName: "GetByIdVote",
			Handler:    _PublicVoteService_GetByIdVote_Handler,
		},
		{
			MethodName: "GetAllPublic",
			Handler:    _PublicVoteService_GetAllPublic_Handler,
		},
		{
			MethodName: "GetAllVote",
			Handler:    _PublicVoteService_GetAllVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vote/public_vote.proto",
}
